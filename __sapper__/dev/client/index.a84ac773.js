import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, m as validate_each_argument, e as element, f as claim_element, g as children, a as detach_dev, j as add_location, k as insert_dev, r as destroy_each, t as text, h as claim_text, o as attr_dev, l as append_dev, p as set_data_dev, b as space, c as claim_space, n as noop, u as assign, w as create_component, x as claim_component, y as mount_component, z as get_spread_update, A as get_spread_object, B as transition_in, C as transition_out, D as destroy_component, E as group_outros, F as check_outros, q as query_selector_all } from './client.b77f9813.js';
import { s as sanityClient } from './sanityClient.1932ff1a.js';

/* src/components/Card.svelte generated by Svelte v3.24.1 */

const file = "src/components/Card.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (17:4) {#if tags}
function create_if_block(ctx) {
	let ul;
	let each_value = /*tags*/ ctx[3];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(ul, file, 17, 8, 558);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tags*/ 8) {
				each_value = /*tags*/ ctx[3];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(17:4) {#if tags}",
		ctx
	});

	return block;
}

// (19:12) {#each tags as tag}
function create_each_block(ctx) {
	let li;
	let a;
	let t_value = /*tag*/ ctx[7] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "/");
			add_location(a, file, 19, 20, 615);
			add_location(li, file, 19, 16, 611);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tags*/ 8 && t_value !== (t_value = /*tag*/ ctx[7] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(19:12) {#each tags as tag}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let img;
	let img_src_value;
	let t0;
	let a;
	let h3;
	let t1;
	let a_href_value;
	let t2;
	let p0;
	let t3;
	let t4_value = /*defaultProductVariant*/ ctx[2].price + "";
	let t4;
	let t5;
	let p1;
	let t6_value = /*blurb*/ ctx[1].en + "";
	let t6;
	let t7;
	let if_block = /*tags*/ ctx[3] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			t0 = space();
			a = element("a");
			h3 = element("h3");
			t1 = text(/*title*/ ctx[0]);
			t2 = space();
			p0 = element("p");
			t3 = text("$");
			t4 = text(t4_value);
			t5 = space();
			p1 = element("p");
			t6 = text(t6_value);
			t7 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(div_nodes);
			a = claim_element(div_nodes, "A", { href: true });
			var a_nodes = children(a);
			h3 = claim_element(a_nodes, "H3", {});
			var h3_nodes = children(h3);
			t1 = claim_text(h3_nodes, /*title*/ ctx[0]);
			h3_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			p0 = claim_element(div_nodes, "P", {});
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "$");
			t4 = claim_text(p0_nodes, t4_value);
			p0_nodes.forEach(detach_dev);
			t5 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", {});
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, t6_value);
			p1_nodes.forEach(detach_dev);
			t7 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "https://cdn.sanity.io/images/bnc9z6ut/production/" + /*newImg*/ ctx[5])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-gdn09o");
			add_location(img, file, 12, 4, 329);
			add_location(h3, file, 13, 36, 444);
			attr_dev(a, "href", a_href_value = "shop/" + /*slug*/ ctx[4].current);
			add_location(a, file, 13, 4, 412);
			add_location(p0, file, 14, 4, 471);
			add_location(p1, file, 15, 4, 515);
			attr_dev(div, "class", "card svelte-gdn09o");
			add_location(div, file, 11, 0, 306);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			append_dev(div, t0);
			append_dev(div, a);
			append_dev(a, h3);
			append_dev(h3, t1);
			append_dev(div, t2);
			append_dev(div, p0);
			append_dev(p0, t3);
			append_dev(p0, t4);
			append_dev(div, t5);
			append_dev(div, p1);
			append_dev(p1, t6);
			append_dev(div, t7);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data_dev(t1, /*title*/ ctx[0]);

			if (dirty & /*slug*/ 16 && a_href_value !== (a_href_value = "shop/" + /*slug*/ ctx[4].current)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*defaultProductVariant*/ 4 && t4_value !== (t4_value = /*defaultProductVariant*/ ctx[2].price + "")) set_data_dev(t4, t4_value);
			if (dirty & /*blurb*/ 2 && t6_value !== (t6_value = /*blurb*/ ctx[1].en + "")) set_data_dev(t6, t6_value);

			if (/*tags*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { blurb } = $$props;
	let { defaultProductVariant } = $$props;
	let { tags } = $$props;
	let { slug } = $$props;
	let imgPath = defaultProductVariant.images[0].asset._ref;
	let newImg = imgPath.replace(/-png/g, ".png").replace(/-jpg/g, ".jpg").replace(/image-/g, "");
	const writable_props = ["title", "blurb", "defaultProductVariant", "tags", "slug"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Card", $$slots, []);

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("blurb" in $$props) $$invalidate(1, blurb = $$props.blurb);
		if ("defaultProductVariant" in $$props) $$invalidate(2, defaultProductVariant = $$props.defaultProductVariant);
		if ("tags" in $$props) $$invalidate(3, tags = $$props.tags);
		if ("slug" in $$props) $$invalidate(4, slug = $$props.slug);
	};

	$$self.$capture_state = () => ({
		title,
		blurb,
		defaultProductVariant,
		tags,
		slug,
		imgPath,
		newImg
	});

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("blurb" in $$props) $$invalidate(1, blurb = $$props.blurb);
		if ("defaultProductVariant" in $$props) $$invalidate(2, defaultProductVariant = $$props.defaultProductVariant);
		if ("tags" in $$props) $$invalidate(3, tags = $$props.tags);
		if ("slug" in $$props) $$invalidate(4, slug = $$props.slug);
		if ("imgPath" in $$props) imgPath = $$props.imgPath;
		if ("newImg" in $$props) $$invalidate(5, newImg = $$props.newImg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title, blurb, defaultProductVariant, tags, slug, newImg];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			blurb: 1,
			defaultProductVariant: 2,
			tags: 3,
			slug: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
			console.warn("<Card> was created without expected prop 'title'");
		}

		if (/*blurb*/ ctx[1] === undefined && !("blurb" in props)) {
			console.warn("<Card> was created without expected prop 'blurb'");
		}

		if (/*defaultProductVariant*/ ctx[2] === undefined && !("defaultProductVariant" in props)) {
			console.warn("<Card> was created without expected prop 'defaultProductVariant'");
		}

		if (/*tags*/ ctx[3] === undefined && !("tags" in props)) {
			console.warn("<Card> was created without expected prop 'tags'");
		}

		if (/*slug*/ ctx[4] === undefined && !("slug" in props)) {
			console.warn("<Card> was created without expected prop 'slug'");
		}
	}

	get title() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get blurb() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set blurb(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get defaultProductVariant() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set defaultProductVariant(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tags() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tags(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get slug() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slug(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/ProductList.svelte generated by Svelte v3.24.1 */
const file$1 = "src/components/ProductList.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (23:4) {#each prodsArr as prod}
function create_each_block$1(ctx) {
	let li;
	let card;
	let t;
	let current;
	const card_spread_levels = [/*prod*/ ctx[3]];
	let card_props = {};

	for (let i = 0; i < card_spread_levels.length; i += 1) {
		card_props = assign(card_props, card_spread_levels[i]);
	}

	card = new Card({ props: card_props, $$inline: true });

	const block = {
		c: function create() {
			li = element("li");
			create_component(card.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			claim_component(card.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file$1, 23, 8, 511);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(card, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = (dirty & /*prodsArr*/ 1)
			? get_spread_update(card_spread_levels, [get_spread_object(/*prod*/ ctx[3])])
			: {};

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(card);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(23:4) {#each prodsArr as prod}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let ul;
	let current;
	let each_value = /*prodsArr*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-14gn6x7");
			add_location(ul, file$1, 21, 0, 469);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*prodsArr*/ 1) {
				each_value = /*prodsArr*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { query } = $$props;

	const client = sanityClient({
		projectId: "bnc9z6ut",
		dataset: "production",
		token: "", // or leave blank to be anonymous user
		useCdn: false, // `false` if you want to ensure fresh data
		
	});

	let prodsArr = [];

	client.fetch(query).then(prods => {
		$$invalidate(0, prodsArr = prods);
	});

	const writable_props = ["query"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ProductList> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("ProductList", $$slots, []);

	$$self.$$set = $$props => {
		if ("query" in $$props) $$invalidate(1, query = $$props.query);
	};

	$$self.$capture_state = () => ({
		Card,
		sanityClient,
		query,
		client,
		prodsArr
	});

	$$self.$inject_state = $$props => {
		if ("query" in $$props) $$invalidate(1, query = $$props.query);
		if ("prodsArr" in $$props) $$invalidate(0, prodsArr = $$props.prodsArr);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [prodsArr, query];
}

class ProductList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { query: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ProductList",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*query*/ ctx[1] === undefined && !("query" in props)) {
			console.warn("<ProductList> was created without expected prop 'query'");
		}
	}

	get query() {
		throw new Error("<ProductList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set query(value) {
		throw new Error("<ProductList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/shop/index.svelte generated by Svelte v3.24.1 */

function create_fragment$2(ctx) {
	let t;
	let products;
	let current;
	products = new ProductList({ props: { query }, $$inline: true });

	const block = {
		c: function create() {
			t = space();
			create_component(products.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-24y5xy\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(products.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Black Cat Shop - Shop";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(products, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(products.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(products.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(products, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const query = "*[_type == \"product\"]";

function instance$2($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Shop> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Shop", $$slots, []);
	$$self.$capture_state = () => ({ Products: ProductList, query });
	return [];
}

class Shop extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Shop",
			options,
			id: create_fragment$2.name
		});
	}
}

export default Shop;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYTg0YWM3NzMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NhcmQuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvUHJvZHVjdExpc3Quc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9zaG9wL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGV4cG9ydCBsZXQgdGl0bGU7XG4gICAgZXhwb3J0IGxldCBibHVyYjtcbiAgICBleHBvcnQgbGV0IGRlZmF1bHRQcm9kdWN0VmFyaWFudDtcbiAgICBleHBvcnQgbGV0IHRhZ3M7XG4gICAgZXhwb3J0IGxldCBzbHVnO1xuXG4gICAgbGV0IGltZ1BhdGggPSBkZWZhdWx0UHJvZHVjdFZhcmlhbnQuaW1hZ2VzWzBdLmFzc2V0Ll9yZWY7XG4gICAgbGV0IG5ld0ltZyA9IGltZ1BhdGgucmVwbGFjZSgvLXBuZy9nLCBcIi5wbmdcIikucmVwbGFjZSgvLWpwZy9nLCBcIi5qcGdcIikucmVwbGFjZSgvaW1hZ2UtL2csIFwiXCIpO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgPGltZyBzcmM9XCJodHRwczovL2Nkbi5zYW5pdHkuaW8vaW1hZ2VzL2JuYzl6NnV0L3Byb2R1Y3Rpb24veyBuZXdJbWcgfVwiIGFsdD1cIlwiPlxuICAgIDxhIGhyZWY9XCJzaG9wL3sgc2x1Zy5jdXJyZW50IH1cIj48aDM+eyB0aXRsZSB9PC9oMz48L2E+XG4gICAgPHA+JHsgZGVmYXVsdFByb2R1Y3RWYXJpYW50LnByaWNlIH08L3A+XG4gICAgPHA+eyBibHVyYi5lbiB9PC9wPlxuICAgIHsjaWYgdGFnc31cbiAgICAgICAgPHVsPlxuICAgICAgICAgICAgeyNlYWNoIHRhZ3MgYXMgdGFnfVxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVwiL1wiPnsgdGFnIH08L2E+PC9saT5cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgPC91bD5cbiAgICB7L2lmfVxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuY2FyZHtcbiAgICAgICAgLyogYm9yZGVyOiAycHggc29saWQgYmxhY2s7ICovXG4gICAgICAgIG1hcmdpbjoxcmVtO1xuICAgICAgICBwYWRkaW5nOi41cmVtO1xuICAgICAgICBib3gtc2hhZG93OiAzcHggMHB4IDE1cHggcmdiYSgwLCAwLCAwLCAwLjQ0NSk7XG4gICAgfVxuICAgIGltZ3tcbiAgICAgICAgbWF4LXdpZHRoOjEwMCU7XG4gICAgfVxuPC9zdHlsZT5cblxuPCEtLSB0b2RvIC0tPlxuPCEtLSBcbiAgICByZWZpbmUgc3R5bGluZ1xuICAgIGFuaW1hdGlvbnMvdHJhbnNpdGlvbnNcbiAgICBpbWFnZSBjcm9wcGluZ1xuXG5cbi0tPiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IENhcmQgZnJvbSAnLi9DYXJkLnN2ZWx0ZSc7XG4gICAgaW1wb3J0IHNhbml0eUNsaWVudCBmcm9tICdAc2FuaXR5L2NsaWVudCc7XG4gICAgXG4gICAgZXhwb3J0IGxldCBxdWVyeTtcblxuICAgIGNvbnN0IGNsaWVudCA9IHNhbml0eUNsaWVudCh7XG4gICAgICAgIHByb2plY3RJZDogJ2JuYzl6NnV0JyxcbiAgICAgICAgZGF0YXNldDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICB0b2tlbjogJycsIC8vIG9yIGxlYXZlIGJsYW5rIHRvIGJlIGFub255bW91cyB1c2VyXG4gICAgICAgIHVzZUNkbjogZmFsc2UgLy8gYGZhbHNlYCBpZiB5b3Ugd2FudCB0byBlbnN1cmUgZnJlc2ggZGF0YVxuICAgIH0pO1xuICAgICAgICBcbiAgICBsZXQgcHJvZHNBcnIgPSBbXTtcblxuICAgIGNsaWVudC5mZXRjaChxdWVyeSkudGhlbihwcm9kcyA9PiB7XG4gICAgICAgIHByb2RzQXJyID0gcHJvZHM7XG4gICAgfSk7XG5cbjwvc2NyaXB0PlxuXG48dWw+XG4gICAgeyNlYWNoIHByb2RzQXJyIGFzIHByb2R9XG4gICAgICAgIDxsaT5cbiAgICAgICAgICAgIDxDYXJkIHsuLi5wcm9kfS8+XG4gICAgICAgIDwvbGk+XG4gICAgey9lYWNofVxuPC91bD5cblxuPHN0eWxlPlxuICAgIHVse1xuICAgICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgICAgICBkaXNwbGF5OmdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmciAxZnI7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcbiAgICAgICAgLyogYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMDksIDIwOSwgMjA5LCAwLjgyOSk7ICovXG4gICAgICAgIG1hcmdpbjowO1xuICAgICAgICBwYWRkaW5nOjJyZW07XG4gICAgfVxuPC9zdHlsZT4iLCI8c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5CbGFjayBDYXQgU2hvcCAtIFNob3A8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPHNjcmlwdD5cblx0aW1wb3J0IFByb2R1Y3RzIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvUHJvZHVjdExpc3Quc3ZlbHRlJztcblxuXHRjb25zdCBxdWVyeSA9ICcqW190eXBlID09IFwicHJvZHVjdFwiXSc7XG48L3NjcmlwdD5cblxuPFByb2R1Y3RzIHF1ZXJ5PXsgcXVlcnkgfS8+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBa0JtQixHQUFJOzs7O2dDQUFULE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQUMsR0FBSTs7OzsrQkFBVCxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1QkFDZ0IsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0REFBSCxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MENBTDNCLEdBQXFCLElBQUMsS0FBSzs7OzswQkFDNUIsR0FBSyxJQUFDLEVBQUU7Ozt5QkFDUixHQUFJOzs7Ozs7Ozs7dUJBSDZCLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0FBTCxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxR0FEa0IsR0FBTTs7Ozs7eURBQ25ELEdBQUksSUFBQyxPQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VEQUFVLEdBQUs7O2tGQUEzQixHQUFJLElBQUMsT0FBTzs7OztpR0FDdEIsR0FBcUIsSUFBQyxLQUFLO2lFQUM1QixHQUFLLElBQUMsRUFBRTs7Z0JBQ1IsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BZkUsS0FBSztPQUNMLEtBQUs7T0FDTCxxQkFBcUI7T0FDckIsSUFBSTtPQUNKLElBQUk7S0FFWCxPQUFPLEdBQUcscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSTtLQUNwRCxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NDQ2dCMUUsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUVBQUosR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFGZixHQUFROzs7O2dDQUFiLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQUFDLEdBQVE7Ozs7K0JBQWIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFBSixNQUFJOzs7Ozs7Ozs7O2tDQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQWxCSyxLQUFLOztPQUVWLE1BQU0sR0FBRyxZQUFZO0VBQ3ZCLFNBQVMsRUFBRSxVQUFVO0VBQ3JCLE9BQU8sRUFBRSxZQUFZO0VBQ3JCLEtBQUssRUFBRSxFQUFFO0VBQ1QsTUFBTSxFQUFFLEtBQUs7Ozs7S0FHYixRQUFROztDQUVaLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2tCQUMxQixRQUFRLEdBQUcsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUNDTk4sS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFIaEIsS0FBSyxHQUFHLHlCQUF1Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
